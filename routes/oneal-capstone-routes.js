/**
==============================================
; Title: Assignment 9.2 - Capstone 
; Author: Chad ONeal
; Date: 12/12/2022
; Description: oneal-capstone-routes.js
==============================================
*/

const express = require("express");
const router = express.Router();
const Team = require('../models/oneal-capstone.js');

/**
 * createTeam
 * @openapi
 * /api/teams:
 *   post:
 *     tags:
 *       - Teams
 *     name: createTeam
 *     description: API for adding new team objects
 *     summary: Create New Team 
 *     requestBody:
 *      description: Teams information
 *      content:
 *        application/json:
 *          schema:
 *            required:
 *              - name
 *              - mascot
 *              - players
 *            properties:
 *              name:
 *                type: string
 *              mascot:
 *                type: string
 *              players:
 *                 type: array
 *                 items:
 *                   type: object
 *                   properties:
 *                     firstName:
 *                       type: string
 *                     lastName:
 *                       type: string
 *                     salary:
 *                       type: number
 *     responses:
 *       '200':
 *         description: Team added
 *       '500':
 *         description: Server Exception
 *       '501':
 *         description: MongoDB Exception
 */
router.post('/teams', async (req, res) => {
	try {
		const newTeam = {
			name: req.body.name,
			mascot: req.body.mascot,
      players: req.body.players,
		};

		await Team.create(newTeam, function (err, team) {
			if (err) {
				console.log(err);
				res.status(501).send({
					message: `MongoDB Exception: ${err}`,
				});
			} else {
				console.log(team);
				res.json(team);
			}
		});
	} catch (e) {
		console.log(e);
		res.status(500).send({
			message: `Server Exception: ${e.message}`,
		});
	}
});

// findAllTeams
/**
 * @openapi
 * /api/teams:
 *   get:
 *     tags:
 *       - Teams
 *     name: findAllTeams
 *     description: Reads and retrieves all teams within database
 *     summary: Find All Teams 
 *     responses:
 *       '200':
 *         description: A list of teams
 *       '500':
 *         description: Server Exception
 *       '501':
 *         description: MongoDB Exception
 */
router.get("/teams", async (req, res) => {
  try {
    Team.find({}, function (err, teams) {
      if (err) {
        res.status(501).send({
          message: `MongoDB Exception:${err}`,
        });
      } else {
        res.json(teams);
      }
    });
  } catch (e) {
    res.status(500).send({
      message: `Server Exception:${e.message}`,
    });
  }
});

// findAllPlayersByTeamId
/**
 * @openapi
 * /api/teams/{id}/players:
 *   get:
 *     tags:
 *        - Teams
 *     name: findAllPlayersByTeamId
 *     description: API to show all players by a team _id
 *     summary: Find all Players
 *     operationId: findAllPlayersByTeamId
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: _id is generated by team document
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Array of player documents
 *       '401':
 *          description: Invalid teamID
 *       '500':
 *         description: Server Exception
 *       '501':
 *         description: MongoDB Exception
 */
router.get("/teams/:id/players", async (req, res) => {
  try {
    Team.findOne({ _id: req.params.id }, function (err, team) {
      if (team) {
        res.json(team.players);
      } else if (!team) {
        res.status(401).send("Invalid teamId");
      } else {
        res.status(501).send({ message: `MongoDB Exception! ${err}` });
      }
    });
  } catch (e) {
    res.status(500).send({ message: `Server Exception! ${e.message}` });
  }
});

// assignPlayerToTeam
/**
 * @openapi
 * /api/teams/{id}/players:
 *   post:
 *     tags:
 *       - Teams
 *     name: assignPlayerToTeam
 *     description: API to assign a player to a team.
 *     summary: Assign Player to Team
 *     operationId: assignPlayerToTeam
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: _id is generated by team document
 *         schema:
 *           type: string
 *     requestBody:
 *       description: Assign a player to a team
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - firstName
 *               - lastName
 *               - salary
 *             properties:
 *               firstName:
 *                 type: string
 *               lastName:
 *                 type: string
 *               salary:
 *                 type: number
 *     responses:
 *       '200':
 *         description: Player document
 *       '401':
 *         description: Invalid teamId
 *       '500':
 *         description: Server Exception
 *       '501':
 *         description: MongoDB Exception
 */
router.post("/teams/:id/players", async (req, res) => {
  try {
    Team.findOne({ _id: req.params.id }, function (err, team) {
      if (team) {
        const newPlayer = {
          firstName: req.body.firstName,
          lastName: req.body.lastName,
          salary: req.body.salary,
        };

        team.players.push(newPlayer);
        team.save();

        res.status(200).json({
          message: "Player Added ",
        });
      } else if (!team) {
        res.status(401).send("Invalid teamId");
      } else {
        res.status(501).send({ message: `MongoDB Exception! ${err}` });
      }
    });
  } catch (e) {
    res.status(500).send({ message: `Server Exception! ${e.message}` });
  }
});

// deleteTeamById
/**
 * @openapi
 * /api/teams/{id}:
 *   delete:
 *     tags:
 *       - Teams
 *     description: Deletes a team document
 *     summary: Delete Team
 *     operationId: deleteTeamById
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         scheme:
 *           type: string
 *     responses:
 *       '200':
 *         description: Team document
 *       '401':
 *          description: Invalid teamID
 *       '500':
 *         description: Server Exception
 *       '501':
 *         description: MongoDB Exception
 */
router.delete("/teams/:id", async (req, res) => {
  try {
    Team.findByIdAndDelete({ _id: req.params.id }, function (err, team) {
      if (team) {
        res.status(200).send({
          message: `Team Deleted:${req.params.id}`,
        });
      } else if (!team) {
        res.status(401).send("Invalid teamId");
      } else {
        res.status(501).send({ message: `MongoDB Exception! ${err}` });
      }
    });
  } catch (e) {
    res.status(500).send({ message: `Server Exception! ${e.message}` });
  }
});


module.exports = router;